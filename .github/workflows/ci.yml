# Created automatically by Cursor AI (2024-01-XX)
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Lint and Type Check
  lint-typecheck:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [frontend, gateway, sdk]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: apps/${{ matrix.app }}/package-lock.json
    
    - name: Install dependencies
      run: |
        cd apps/${{ matrix.app }}
        npm ci
    
    - name: Run ESLint
      run: |
        cd apps/${{ matrix.app }}
        npm run lint
    
    - name: Run TypeScript check
      run: |
        cd apps/${{ matrix.app }}
        npm run typecheck
    
    - name: Run Prettier check
      run: |
        cd apps/${{ matrix.app }}
        npm run format:check

  # Python Lint and Type Check
  python-lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [orchestrator, workers]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        cd apps/${{ matrix.app }}
        pip install -r requirements.txt
        pip install black flake8 mypy ruff
    
    - name: Run Black (code formatting check)
      run: |
        cd apps/${{ matrix.app }}
        black --check --diff .
    
    - name: Run Flake8 (linting)
      run: |
        cd apps/${{ matrix.app }}
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Run MyPy (type checking)
      run: |
        cd apps/${{ matrix.app }}
        mypy . --ignore-missing-imports
    
    - name: Run Ruff (fast Python linter)
      run: |
        cd apps/${{ matrix.app }}
        ruff check .

  # Unit Tests
  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [frontend, gateway, orchestrator, workers]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js (for frontend/gateway)
      if: matrix.app == 'frontend' || matrix.app == 'gateway'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: apps/${{ matrix.app }}/package-lock.json
    
    - name: Setup Python (for orchestrator/workers)
      if: matrix.app == 'orchestrator' || matrix.app == 'workers'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Node.js dependencies
      if: matrix.app == 'frontend' || matrix.app == 'gateway'
      run: |
        cd apps/${{ matrix.app }}
        npm ci
    
    - name: Install Python dependencies
      if: matrix.app == 'orchestrator' || matrix.app == 'workers'
      run: |
        cd apps/${{ matrix.app }}
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
    
    - name: Run Node.js tests
      if: matrix.app == 'frontend' || matrix.app == 'gateway'
      run: |
        cd apps/${{ matrix.app }}
        npm test -- --coverage --watchAll=false
    
    - name: Run Python tests
      if: matrix.app == 'orchestrator' || matrix.app == 'workers'
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
      run: |
        cd apps/${{ matrix.app }}
        pytest --cov=. --cov-report=xml --cov-report=term-missing

  # Docker Build
  docker-build:
    runs-on: ubuntu-latest
    needs: [lint-typecheck, python-lint, unit-tests]
    strategy:
      matrix:
        app: [frontend, gateway, orchestrator, workers]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.app }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./apps/${{ matrix.app }}
        file: ./apps/${{ matrix.app }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # SBOM Generation
  sbom:
    runs-on: ubuntu-latest
    needs: [lint-typecheck, python-lint, unit-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Generate SBOM for Node.js apps
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install CycloneDX generator
      run: npm install -g @cyclonedx/cyclonedx-npm
    
    - name: Generate SBOM for frontend
      run: |
        cd apps/frontend
        cyclonedx-npm --output-file sbom-frontend.xml
        cyclonedx-npm --output-file sbom-frontend.json --format json
    
    - name: Generate SBOM for gateway
      run: |
        cd apps/gateway
        cyclonedx-npm --output-file sbom-gateway.xml
        cyclonedx-npm --output-file sbom-gateway.json --format json
    
    - name: Generate SBOM for SDK
      run: |
        cd packages/sdk
        cyclonedx-npm --output-file sbom-sdk.xml
        cyclonedx-npm --output-file sbom-sdk.json --format json
    
    - name: Setup Python for SBOM
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install CycloneDX Python generator
      run: pip install cyclonedx-python-lib
    
    - name: Generate SBOM for orchestrator
      run: |
        cd apps/orchestrator
        cyclonedx-py --input-file requirements.txt --output-file sbom-orchestrator.xml
        cyclonedx-py --input-file requirements.txt --output-file sbom-orchestrator.json --format json
    
    - name: Generate SBOM for workers
      run: |
        cd apps/workers
        cyclonedx-py --input-file requirements.txt --output-file sbom-workers.xml
        cyclonedx-py --input-file requirements.txt --output-file sbom-workers.json --format json
    
    - name: Upload SBOM artifacts
      uses: actions/upload-artifact@v4
      with:
        name: sbom-files
        path: |
          apps/*/sbom-*.xml
          apps/*/sbom-*.json
          packages/*/sbom-*.xml
          packages/*/sbom-*.json

  # Cosign Signing
  cosign:
    runs-on: ubuntu-latest
    needs: [docker-build, sbom]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Cosign
      uses: sigstore/cosign-installer@v3
      with:
        cosign-release: 'v2.1.1'
    
    - name: Sign SBOM artifacts
      run: |
        for file in apps/*/sbom-*.xml apps/*/sbom-*.json packages/*/sbom-*.xml packages/*/sbom-*.json; do
          if [ -f "$file" ]; then
            cosign sign-blob "$file" --output-signature "$file.sig" --output-certificate "$file.cert"
          fi
        done
    
    - name: Upload signed artifacts
      uses: actions/upload-artifact@v4
      with:
        name: signed-sbom
        path: |
          apps/*/sbom-*.sig
          apps/*/sbom-*.cert
          packages/*/sbom-*.sig
          packages/*/sbom-*.cert

  # Migration Gate
  migration-gate:
    runs-on: ubuntu-latest
    needs: [lint-typecheck, python-lint, unit-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: migration_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        cd apps/orchestrator
        pip install -r requirements.txt
    
    - name: Run database migrations
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/migration_test
      run: |
        cd apps/orchestrator
        alembic upgrade head
    
    - name: Verify migration integrity
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/migration_test
      run: |
        cd apps/orchestrator
        python -c "
        from app.database import engine
        from sqlalchemy import text
        with engine.connect() as conn:
            result = conn.execute(text('SELECT version_num FROM alembic_version'))
            version = result.scalar()
            print(f'Current migration version: {version}')
            assert version is not None, 'Migration version not found'
        "
    
    - name: Test rollback (dry run)
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/migration_test
      run: |
        cd apps/orchestrator
        alembic downgrade -1 --sql

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    needs: [lint-typecheck, python-lint, unit-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run Bandit security linter (Python)
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Bandit
      run: pip install bandit
    
    - name: Run Bandit scan
      run: |
        bandit -r apps/orchestrator/ -f json -o bandit-orchestrator.json || true
        bandit -r apps/workers/ -f json -o bandit-workers.json || true
    
    - name: Upload Bandit results
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: |
          bandit-*.json
          trivy-results.sarif

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [docker-build, migration-gate]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: integration_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      nats:
        image: nats:2-alpine
        options: >-
          --health-cmd "nats-server --help"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 4222:4222
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install pytest pytest-asyncio httpx docker-compose
    
    - name: Start services with docker-compose
      run: |
        docker-compose -f docker-compose.dev.yml up -d postgres redis nats minio
    
    - name: Wait for services
      run: |
        sleep 30
    
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/integration_test
        REDIS_URL: redis://localhost:6379
        NATS_URL: nats://localhost:4222
        MINIO_ENDPOINT: localhost:9000
      run: |
        cd apps/orchestrator
        pytest tests/integration/ -v
    
    - name: Cleanup
      if: always()
      run: |
        docker-compose -f docker-compose.dev.yml down -v
